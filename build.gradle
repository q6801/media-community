plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	implementation group: 'org.kurento', name: 'kurento-client', version: '6.15.0'
	implementation group: 'org.kurento', name: 'kurento-utils-js', version: '6.15.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation("com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3")
	implementation("org.bouncycastle:bcprov-jdk15on:1.64")

	implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
	implementation 'com.amazonaws:aws-java-sdk-s3'

	implementation group: 'org.jsoup', name: 'jsoup', version: '1.14.3'
	implementation 'com.navercorp.lucy:lucy-xss-servlet:2.0.1'

}

//lombok.config{
//	lombok.addLombokGeneratedAnnotation = true
//}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
			limit {
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.30
			}
		}

		rule {
			// 룰을 간단히 켜고 끌 수 있다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 커버리지를 최소한 80% 만족시켜야 한다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
//              maximum = 8
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [
//                    '*.test.*',
//                    '*.Kotlin*'
			]
		}
	}
}

test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
//		excludes += ["com/example/mediacommunity/community/service/StreamingService.class"]
//		com.example.mediacommunity.community.service
	}

	useJUnitPlatform()
	systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
	systemProperty "kms.url", findProperty("kms.url")
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//      각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
      html.destination file("$buildDir/jacocoHtml")
//      xml.destination file("$buildDir/jacoco.xml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/example/**/StreamingService.class",
//					"com/baeldung/**/*DTO.*",
//					"**/config/*"
			])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}
task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}